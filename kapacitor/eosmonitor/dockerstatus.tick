// docker_container_status

// measurement: docker_container_status
// tags: host
// fields: head_block_num, head_block_time, last_irreversible_block_num, now

// DEFINE: kapacitor define docker_container_status -type stream -tick docker_container_status.tick -dbrp telegraf.autogen
// ENABLE: kapacitor enable eosmonitor

// Parameters
var db = 'telegraf'

var rp = 'autogen'

var measurement = 'docker_container_status'

var groupBy = ['host']

// var whereFilter = lambda: TRUE
var whereFilter = lambda: ("container_name" == 'eosforce')

var name = 'docker_container_status'

var idVar = name + ':{{.Group}}'

var message = '{{ .ID }} is {{ .Level }} at {{.Time}}'

var idTag = 'alertID'

var levelTag = 'level'

var messageField = 'message'

var durationField = 'duration'

var outputDB = 'chronograf'

var outputRP = 'autogen'

var outputMeasurement = 'alerts'

var triggerType = 'threshold'

var details = 'docker 容器在60秒内发生重启'

var crit = 60000000000

// Dataframe
var data = stream
    |from()
        .database(db)
        .retentionPolicy(rp)
        .measurement(measurement)
        .groupBy(groupBy)
        .where(whereFilter)
    |eval(lambda: unixNano(now()) - "finished_at")
        .as('delta')

// Thresholds
var trigger = data
    |alert()
        .crit(lambda: "delta" < crit)
        .message(message)
        .id(idVar)
        .idTag(idTag)
        .levelTag(levelTag)
        .messageField(messageField)
        .durationField(durationField)
        .details(details)
        .email()
        .to('akagi201@qq.com')
        .to('ac_geezer@163.com')
        .to('1303404632@qq.com')
        .to('445437701@qq.com')
        .to('857731303@qq.com')
        .to('48989990@qq.com')
        .to('862571240@qq.com')
        .to('834298727@qq.com')
        .telegram()
        .chatId('89606473')
        .parseMode('Markdown')

trigger
    |eval(lambda: "delta")
        .as('delta')
        .keep()
    |influxDBOut()
        .create()
        .database(outputDB)
        .retentionPolicy(outputRP)
        .measurement(outputMeasurement)
        .tag('alertName', name)
        .tag('triggerType', triggerType)

// Alert
trigger
    |httpOut('output')
